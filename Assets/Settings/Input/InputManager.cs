//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Input/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""7d2a8c93-bf3d-4a8b-a822-669d6421ad4d"",
            ""actions"": [
                {
                    ""name"": ""ForwardMovementInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7b13b10d-675b-4537-9302-458ec7397021"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LiftingInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3f2346b1-3c24-4598-8577-3dac78d691ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6111bba7-8213-42d4-99df-cdde019dd99b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardMovementInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""141b6b37-a696-4b61-9a3d-53f16f8df169"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardMovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""614b0eb0-1ff7-4966-bb34-4301a928561b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardMovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d216cc61-262f-41b4-92a7-172c068fc48d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LiftingInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6f2986ad-aeac-471e-9c03-f52fe4b77e20"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LiftingInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""acd97774-21f0-4d71-90dd-e3a87b2b0fe9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LiftingInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_ForwardMovementInput = m_Keyboard.FindAction("ForwardMovementInput", throwIfNotFound: true);
        m_Keyboard_LiftingInput = m_Keyboard.FindAction("LiftingInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private IKeyboardActions m_KeyboardActionsCallbackInterface;
    private readonly InputAction m_Keyboard_ForwardMovementInput;
    private readonly InputAction m_Keyboard_LiftingInput;
    public struct KeyboardActions
    {
        private @InputManager m_Wrapper;
        public KeyboardActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @ForwardMovementInput => m_Wrapper.m_Keyboard_ForwardMovementInput;
        public InputAction @LiftingInput => m_Wrapper.m_Keyboard_LiftingInput;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
            {
                @ForwardMovementInput.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnForwardMovementInput;
                @ForwardMovementInput.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnForwardMovementInput;
                @ForwardMovementInput.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnForwardMovementInput;
                @LiftingInput.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnLiftingInput;
                @LiftingInput.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnLiftingInput;
                @LiftingInput.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnLiftingInput;
            }
            m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ForwardMovementInput.started += instance.OnForwardMovementInput;
                @ForwardMovementInput.performed += instance.OnForwardMovementInput;
                @ForwardMovementInput.canceled += instance.OnForwardMovementInput;
                @LiftingInput.started += instance.OnLiftingInput;
                @LiftingInput.performed += instance.OnLiftingInput;
                @LiftingInput.canceled += instance.OnLiftingInput;
            }
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    public interface IKeyboardActions
    {
        void OnForwardMovementInput(InputAction.CallbackContext context);
        void OnLiftingInput(InputAction.CallbackContext context);
    }
}
